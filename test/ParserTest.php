<?php

namespace test;

include_once "./Parser.php";

use Parser;
use PHPUnit\Framework\TestCase;
use RuntimeException;

class ParserTest extends TestCase
{

    private $parser;

    /**
     * @return void
     */
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->parser = new Parser();
    }

    public function testParseFileWithValidFile()
    {

        $outputFile = 'test_output.csv';

        $this->parser->setOutputFile($outputFile);

        // Assume you have a sample CSV file for testing in the same directory
        $filePath = 'products/products_comma_separated.csv';

        $this->parser->parseFile($filePath);

        $this->assertFileExists($outputFile);

        unlink($outputFile);
    }

    public function testParseFileWithInvalidFile()
    {
        $this->expectException(RuntimeException::class);
        $filePath = 'invalid_file.csv';
        $this->parser->parseFile($filePath);
    }

    /**
     * @throws \ReflectionException
     */
    public function testDetectDelimiter()
    {
        $method = new \ReflectionMethod($this->parser, 'detectDelimiter');
        $method->setAccessible(true);

        $result = $method->invoke($this->parser, '"AASTRA","6865I","Working","Grade B - Good Condition","Not Applicable","Black","Not Applicable"');
        $this->assertEquals(',', $result);

        $result = $method->invoke($this->parser, '"ZTE"	"V871"	"Brand New"	"Brand New"	"Not Applicable"	"Black"	"Unlocked"');
        $this->assertEquals("\t", $result);

    }

    /**
     * @throws \ReflectionException
     */
    public function testValidateHeader()
    {
        $method = new \ReflectionMethod($this->parser, 'validateHeader');
        $method->setAccessible(true);

        $header = ['brand_name', 'model_name', 'colour_name', 'gb_spec_name', 'network_name', 'grade_name', 'condition_name'];
        $method->invoke($this->parser, $header);

        $invalidHeader = ['brand_name', 'model_name', 'colour_name'];
        $this->expectException(RuntimeException::class);
        $method->invoke($this->parser, $invalidHeader);
    }
}